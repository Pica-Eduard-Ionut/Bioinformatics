# 1. Take an arbitrary DNA sequence from the NCBI (National Center for Biotechnology), between 1000 and 3000 nucleotides (letters).
# a) Take 2000 random samples from this sequence, of about 100-150 bases.
# b) Store these samples in an array.
# c) Rebuild the original DNA sequence using these random samples.
# d) make a text file called answer.txt in which you explain what would be the main issue with the algorithm approach

# S length = 2349
S ="TCAATTATATTCAGCATGGAAAGAATAAAAGAACTACGGAATCTAATGTCGCAGTCTCGCACCCGCGAGATACTAACAAAAACCACAGTGGACCATATGGCCATAATTAAGAAGTACACATCGGGGAGACAGGAAAAGAACCCGTCACTTAGAATGAAATGGATGATGGCAATGAAATATCCAATTACTGCTGACAAAAGGATAACAGAAATGGTTCCAGAGAGAAATGAACAAGGACAAACCCTATGGAGTAAAATGAGTGATGCTGGGTCAGATAGAGTGATGGTATCACCTTTGGCTGTAACATGGTGGAATAGAAATGGGCCCGTGACAAATACGGTCCATTACCCAAAAGTGTACAAAACTTATTTTGACAAAGTCGAAAGGTTGAAACATGGAACCTTCGGCCCTGTCCATTTTAGAAACCAAGTCAAAATACGTAGAAGAGTAGACACAAACCCTGGTCATGCAGACCTCAGTGCCAAAGAGGCACAAGATGTAATTATGGAAGTTGTTTTTCCCAATGAAGTGGGGGCCAGAATACTAACATCAGAATCACAGCTAACAATAACCAAAGAGAAAAAAGAAGAACTCCGAGATTGCAAAATTTCCCCCTTGATGGTCGCATACATGCTAGAGAGAGAACTTGTGCGGAAAACAAGATTTCTCCCAGTTGCTGGCGGAACAAGCAGTATATACATTGAAGTTTTACATTTGACTCAAGGAACGTGTTGGGAACAAATGTACACTCCAGGTGGAGGAGTGAGGAATGACGATGTTGACCAAAGCCTAATTATTGCGGCCAGGAACATAGTGAGAAGAGCCGCAGTGTCAGCAGATCCACTCGCATCTTTATTGGAGATGTGCCACAGCACGCAAATTGGCGGAACAAGGATGGTGGACATTCTTAGGCAGAACCCGACTGAAGAACAAGCTGTGGATATATGCAAAGCTGCAATGGGATTGAGAATCAGCTCATCTTTCAGCTTTGGTGGCTTTACATTTAAAAGAACGAGCGGGTCGTCAGTCAAAAGAGATGAAGAGGTTCTTACAGGTAATCTCCAAACATTGAGAATAAGAGTACATGAGGGGTATGAGGAATTCACAATGGTGGGGAAAAGAGCAACAGCTATACTAAGAAAAGCAACCAGAAGACTGGTTCAACTCATAGTGAGTGGAAGAGACGAACAGTCAGTAGCCGAGGCAATAATCGTGGCCATGGTTTTTTCCCAAGAAGATTGCATGATAAAAGCAGTTAGAGGTGACCTGAATTTTGTCAACAGAGCAAATCAGCGGTTGAACCCCATGCATCAGCTTTTAAGGCATTTTCAGAAAGATGCGAAAGTACTCTTTCAAAATTGGGGAGTTGAACACATCGACAGTGTGATGGGAATGGTTGGAGTATTACCAGATATGACTCCAAGCACAGAGATGTCAATGAGAGGAATAAGAGTCAGCAAAATGGGCGTGGATGAATACTCCAGTACAGAGAGGGTGGTGGTTAGCATTGATAGGTTTTTGAGAGTTCGAGACCAACGGGGGAATGTATTGTTATCTCCTGAGGAAGTCAGTGAAACACAAGGAACTGAAAGACTGACCATAACTTATTCATCATCGATGATGTGGGAAATTAATGGGCCTGAGTCGGTTTTGGTCAATACCTATCAATGGATCATCAGGAATTGGGAAGCTATCAAAATTCAGTGGTCTCAGAACCCTGCAATGTTGTACAACAAAATGGAATTTGAACCATTTCAATCTTTAGTCCCCAAGGCCACTAGAAGCCAATACAGTGGGTTTGTCAGAACTCTATTCCAACAAATGAGAGACGTACTTGGGACATTTGACACTGCCCAGATAATAAAGCTTCTCCCTTTTGCAGCTGCTCCACCAAAGCAAAGCAGAATGCAGTTCTCTTCACTGACTGTGAATGTGAGGGGATCAGGGATGAGAATACTTGTAAGGGGCAATTCTCCTGTATTCAACTACAACAAGACCACTAAAAGGCTAACAATTCTTGGAAAAGATGCCGGCACTTTAATTGAAGACCCAGATGAAAGCACATCCGGAGTGGAGTCCGCCGTCTTGAGAGGGTTCCTCATTATAGGTAAAGAAGACAGAAGATACGGACCAGCATTAAGCATCAATGAACTGAGTAACCTTGCAAAAGGGGAAAAGGCTAATGTGTTAATTGGGCAAGGAGACGTGGTGTTGGTAATGAAACGGAAACGGGACTCTAGTATACTTACTGACAGCCAGACAGCGACCAAACGAATTCGGATGGCCATCAATTAATATTGAATAGTTTAAAAACGA"

import random as rand

def getSubSeq(seq):
    length = rand.randint(99,150)
    rangeMax = len(seq)-length
    startIndex = rand.randint(0,rangeMax)
    return seq[startIndex:startIndex+length]

def findOverlap(seq1, seq2):
    maxOverlap = 0
    minOverlap = 10

    for i in range(minOverlap, min(len(seq1), len(seq2))):
        if seq1[-i:] == seq2[:i]:
            maxOverlap = i

    return maxOverlap

def rebuildSequence(samples, originalSequence):
    reconstructed = samples[0]
    processed = [False] * len(samples)
    originalLength = len(originalSequence)

    while len(reconstructed) < originalLength:
        progressMade = False

        for i, subsequence in enumerate(samples):
            if processed[i]:
                continue

            overlapLength = findOverlap(reconstructed, subsequence)
            if overlapLength > 0:
                reconstructed += subsequence[overlapLength:]
                processed[i] = True
                progressMade = True
                break

        if not progressMade or len(reconstructed) >= originalLength or all(processed):
            break

    return reconstructed


samples = []

for i in range(0,2000):
    sample = getSubSeq(S)
    samples.append(sample)

print(samples)
print()
print("Original sequence length: " + str(len(S)))

rebuiltS = rebuildSequence(samples,S)
print("Sequence was rebuilt succesfully: " + str(rebuiltS == S))
print("Rebuilt sequence length: " + str(len(rebuiltS)))

print("S: "+str(S))
print("\nRebuilt: "+str(rebuiltS))


